################################################################################
# Variables
################################################################################

export BEEP=/usr/share/sounds/KDE-Sys-App-Positive.ogg

export PATH=$PATH:$HOME/.cargo/bin

export PATH=$PATH:/opt/node/bin

export PATH=$PATH:$HOME/app/anaconda3/bin

export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

################################################################################
# Aliases
################################################################################

# enable color support of various commands
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -lrt'
alias lh='ls -h'
alias la='ls -lA'
alias l='ls -CF'

alias back='cd $OLDPWD'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

alias update='sudo apt-get update && sudo apt-get upgrade -y'
alias install='sudo apt install'
alias uninstall='sudo apt purge'

alias ports='netstat -tulanp'
alias p='ps aux | grep'
alias naut='nautilus'
alias beep='paplay $BEEP'
alias svim='sudo vim'
alias get='curl -fsSL'
alias h='history | grep'
alias f='find . | grep'

#alias rm='rm -i'
#alias mv='mv -i'
#alias cp='cp -i'
#alias ln='ln -i'

################################################################################
# Functions
################################################################################

branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

commit() {
    git add .
    git commit -m "$1"
}

pull() {
    git pull origin "$(branch)"
}

push() {
    if [ -z "$1" ]; then
        git push origin "$(branch)"
    else
        commit "$1"
        git push origin "$(branch)"
    fi
}

extract() {
    local x
    ee() { # echo and execute
        echo "$@"
        $1 "$2"
    }
    for x in "$@"; do
        [[ -f $x ]] || continue
        case "$x" in
            *.tar.bz2 | *.tbz2 )    ee "tar xvjf" "$x";;
            *.tar.gz | *.tgz )      ee "tar xvzf" "$x";;
            *.bz2 )                 ee "bunzip2" "$x";;
            *.rar )                 ee "unrar x" "$x";;
            *.gz )                  ee "gunzip" "$x";;
            *.tar )                 ee "tar xvf" "$x";;
            *.zip )                 ee "unzip" "$x";;
            *.Z )                   ee "uncompress" "$x";;
            *.7z )                  ee "7z x" "$x";;
        esac
    done
}

cd() {
    new_directory="$*";
    if [ $# -eq 0 ]; then 
        new_directory=${HOME};
    fi
    builtin cd "${new_directory}" && ls
}

speedtest() {
    curl -L https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -
}

reload() {
    source ~/.bashrc
}

update_config() {
    curl -fsSL https://raw.githubusercontent.com/NikosGavalas/dotfiles/master/setup.sh | bash
}

rollback_config() {
    FILES=(
        ".bashrc"
        ".zshrc"
        ".commonrc"
        ".vimrc"
        ".gitconfig"
        ".tmux.conf"
        ".config/nvim/init.vim"
        ".config/Code/User/settings.json"
    )
    for file in "${FILES[@]}"; do
        mv "$HOME/${file}.old" "$HOME/${file}" 2>/dev/null || (rm "$HOME/${file}" && echo "removed ${file}")
    done
}

clean_cache() {
    # this will find and delete all files in the ~/.cache dir that were not accessed more than a year ago
    find ~/.cache/ -type f -atime +365 -delete
}

ldu() {
    local pth="."
    if [[ $# != 0 ]]; then
        pth=$1
    fi
    du -h $pth --max-depth=1 | sort -hr
}

enslave() {
    # Set up the dirs in case it's a new account
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    touch ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/authorized_keys
    chmod go-w ~

    # Fetch public keys
    get https://raw.githubusercontent.com/NikosGavalas/dotfiles/master/authorized_keys >> ~/.ssh/authorized_keys

    # Remove duplicates
    sort ~/.ssh/authorized_keys | uniq > ~/.ssh/authorized_keys.uniq
    mv ~/.ssh/authorized_keys{.uniq,}
}

encrypt() {
    if [[ $# != 2 ]]; then
        echo "usage: encrypt <infile> <outfile>"
        return 1
    fi
    openssl enc -aes-256-cbc -salt -a -in $1 -out $2 || { echo "File not found"; return 1; }
}

decrypt() {
    if [[ $# != 2 ]]; then
        echo "usage: decrypt <infile> <outfile>"
        return 1
    fi
    openssl enc -aes-256-cbc -d -a -in $1 -out $2 || { echo "File not found"; return 1; }
}

o() {
    xdg-open $1 2> /dev/null
}

install_packages() {
    sudo apt update
    PACKAGES="git vim bash-completion glances htop iotop iftop build-essential \
    zsh neovim python3 gcc g++ binutils bc tree screen tmux nnn"
    for p in ${PACKAGES}; do sudo apt install -y $p; done
}
